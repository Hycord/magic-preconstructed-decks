#!/usr/bin/env ruby

require "pry"
require "pathname"

class ResolveCard
  def initialize(set, deck_name, card_name, printing)
    @set = set
    @deck_name = deck_name
    @card_name = card_name
    @printing = printing

    # some of the decks might have partial annotations, we need to replace them as well
    # there's also * sometimes seen in old WotC decklists (to indicate reprint status or something like that)
    printing_set_code = printing[/\[(.*):/, 1]
    if printing_set_code
      @optional_printing_code = "(?:" + Regexp.escape(" [#{printing_set_code}]") + "|\\*)?"
    else
      @optional_printing_code = ""
    end
  end

  def deck_path
    unless @deck_path
      paths = Pathname.glob("data/*/#{@set}/#{@deck_name}.txt")
      raise "Can't find deck #{set} / #{deck_name}" unless paths.size == 1
      @deck_path = paths.first
    end
    @deck_path
  end

  def resolve_line(line)
    return line if @was_updated
    return line unless line =~ /\A(\d+\s+#{Regexp.escape(@card_name)})#{@optional_printing_code}$/
    @was_updated = true
    "#{$1} #{@printing}"
  end

  def call
    data = deck_path.read
    updated = data.split("\n").map do |line|
      resolve_line(line)
    end.join("\n") + "\n"
    if data != updated
      deck_path.write(updated)
    else
      warn "Update failed for #{ARGV.inspect}, no matching lines found"
    end
  end
end

unless ARGV.size == 4
  STDERR.puts "Usage: #{$0} set deck_name card_name printing"
  exit 1
end

ResolveCard.new(*ARGV).call
