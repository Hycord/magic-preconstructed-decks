#!/usr/bin/env ruby

require "json"
require "pathname"
require "pathname-glob"
# Ruby 2.3 or older
require "hash-polyfill" unless Hash.method_defined?(:compact)
require_relative "../lib/deck"
require_relative "../lib/deck_types"
require_relative "../lib/sets"

class BuildJsons
  def initialize
    @decks = []
  end

  def data_root
    @data_root ||= Pathname(__dir__) + "../data"
  end

  def add_deck(name, deck, set_code, set_name, deck_type)
    deck_data = {
      name: name,
      type: deck_type.name,
      category: deck_type.category,
      format: deck_type.format,
      set_name: set_name,
      set_code: set_code,
      release_date: deck.release_date,
      cards: deck.sections,
      source: deck.source,
      display: deck.display,
      languages: deck.languages,
    }.compact
    @decks << deck_data
  end

  def validate_and_add_deck(path, deck)
    name_from_file = path.basename(".txt").to_s.gsub(/(?<! )- /, ': ')
    name_from_metadata = deck.name
    name = reconcile_name(path, name_from_file, name_from_metadata)
    set_code = path.parent.basename.to_s.sub(/_\z/, "")
    deck_type = path.parent.parent.basename.to_s
    set_name = MagicSets[set_code]
    unless set_name
      warn "Unknown set #{set_code}, skipping"
      return
    end
    type = DeckType[deck_type]
    if type
      type.validate(deck)
      add_deck(name, deck, set_code, set_name, type)
    else
      warn "Unknown deck type #{deck_type} with contents #{deck.contents_sizes}, skipping"
    end
  end

  def reconcile_name(path, name_from_file, name_from_metadata)
    if name_from_metadata =~ /™|®|Secret Lair x|Secret Lair Drop|"|<|>|‘|S\.P\.E\.C\.I\.A\.L\./
      warn "Name #{name_from_metadata} is terrible"
      return name_from_file
    end

    if name_from_file == name_from_metadata
      return name_from_metadata
    end

    if name_from_metadata.tr(":!',", "").sub(/ Foil Edition\z/, " foil").sub(/ Foil Etched Edition\z/, " etched") == name_from_file.tr("'", "")
      new_filename = path.dirname + (name_from_metadata.gsub(/(?<! ): /, '- ') + ".txt")
      puts "git mv #{path.to_s.inspect} #{new_filename.to_s.inspect}"

      return name_from_metadata
    end

    warn "NAME MISMATCH: #{name_from_file.inspect} #{name_from_metadata.inspect}"
    name_from_file
  end

  def save_jsons(out)
    out.puts JSON.pretty_generate(@decks)
  end

  def build(save_path)
    data_root.glob("*/*/*.txt").each do |path|
      deck = Deck.new(path)
      validate_and_add_deck path, deck
    end
    @decks.sort_by!{|d| [d[:set_code], d[:name]]}

    if save_path
      open(save_path, "w"){|fh| save_jsons(fh)}
    else
      # save_jsons(STDOUT)
    end
  end
end

BuildJsons.new.build(ARGV[0])
